"""Autogenerated SQLAlchemy models based on OpenAlchemy models."""
# pylint: disable=no-member,useless-super-delegation

import typing

from open_alchemy import models


class DivisionDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    name: str


class Division(models.Division):
    """SQLAlchemy model."""

    id: int
    name: str

    @classmethod
    def from_dict(cls, **kwargs: typing.Any) -> "Division":
        """Construct from a dictionary (eg. a POST payload)."""
        return super().from_dict(**kwargs)

    def to_dict(self) -> DivisionDict:
        """Convert to a dictionary (eg. to send back for a GET request)."""
        return super().to_dict()


class EmployeeDict(typing.TypedDict, total=True):
    """TypedDict for properties that are required."""

    id: int
    name: str


class Employee(models.Employee):
    """SQLAlchemy model."""

    id: int
    name: str

    @classmethod
    def from_dict(cls, **kwargs: typing.Any) -> "Employee":
        """Construct from a dictionary (eg. a POST payload)."""
        return super().from_dict(**kwargs)

    def to_dict(self) -> EmployeeDict:
        """Convert to a dictionary (eg. to send back for a GET request)."""
        return super().to_dict()
